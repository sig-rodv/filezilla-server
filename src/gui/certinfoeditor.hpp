#ifndef CERTINFOEDITOR_HPP
#define CERTINFOEDITOR_HPP

#include "../filezilla/securable_socket.hpp"
#include "../server/server_settings.hpp"

#include <wx/panel.h>

class wxTextCtrl;
class wxChoicebook;
class wxButton;
class wxBookCtrlBase;
class wxSimplebook;

class CertInfoEditor: public wxPanel
{
public:
	enum cert_id: std::uint64_t {
		ftp_cert_id,
		admin_cert_id
	};

	using GenerateSelfsignedFunc = std::function<void (cert_id genid, const std::string &dn, const std::vector<std::string> &hostnames)>;
	using GenerateAcmeFunc = std::function<void (cert_id genid, const fz::securable_socket::acme_cert_info &info)>;
	using UploadCertificateFunc = std::function<void (cert_id genid, const std::string &cert, const std::string &key, const fz::native_string &password)>;
	using SwitchToAcmeOptsFunc = std::function<void ()>;

	CertInfoEditor() = default;

	bool Create(wxWindow *parent,
				cert_id genid,
				wxWindowID winid = wxID_ANY,
				const wxPoint& pos = wxDefaultPosition,
				const wxSize& size = wxDefaultSize,
				long style = wxTAB_TRAVERSAL | wxNO_BORDER,
				const wxString& name = wxS("certinfoeditor"));

	//! Sets the cert_info data the editor will have to display and let the user edit.
	//! It *doesn't* take ownership of the object.
	void SetValue(fz::securable_socket::cert_info *cert_info, const fz::securable_socket::cert_info::extra &extra);
	void SetGenerateSelfsignedCertificateFunction(GenerateSelfsignedFunc func);
	void SetGenerateAcmeCertificateFunction(GenerateAcmeFunc func);
	void SetUploadCertificateFunction(UploadCertificateFunc func);

	void SetAcmeOptions(const server_settings::acme_options &acme_opts);
	void SetSwitchToAcmeOptsFunc(SwitchToAcmeOptsFunc func);

private:
	struct cert_details: wxPanel {
		using wxPanel::wxPanel;

		bool Create(wxWindow *parent);
		void SetWaiting();
		void Clear();

		wxTextCtrl *fingerprint_ctrl_{};
		wxTextCtrl *activation_date_ctrl_{};
		wxTextCtrl *expiration_date_ctrl_{};
		wxTextCtrl *distinguished_name_ctrl_{};
		wxTextCtrl *hostnames_ctrl_{};
	};

	bool TransferDataFromWindow() override;
	void create_acme_editor();
	void update_acme();

	cert_id genid_;

	wxChoicebook *book_{};
	wxSimplebook *details_book_{};

	wxTextCtrl *key_file_ctrl_{};
	wxTextCtrl *certs_file_ctrl_{};
	wxTextCtrl *key_file_pass_ctrl_{};

	wxButton *generate_selfsigned_ctrl_{};
	wxButton *upload_ctrl_{};

	cert_details *provided_details_ctrl_{};
	cert_details *uploaded_details_ctrl_{};
	cert_details *generated_selfsigned_details_ctrl_{};
	cert_details *generated_acme_details_ctrl_{};

	wxWindow *acme_ctrl_{};
	wxButton *generate_acme_ctrl_{};

	fz::securable_socket::cert_info *cert_info_{};
	fz::securable_socket::cert_info::extra extra_info_;

	std::optional<fz::securable_socket::user_provided_cert_info> user_provided_cert_info_;
	std::optional<fz::securable_socket::uploaded_cert_info> uploaded_cert_info_;
	std::optional<fz::securable_socket::autogenerated_cert_info> autogenerated_cert_info_;
	std::optional<fz::securable_socket::acme_cert_info> acme_cert_info_;

	GenerateSelfsignedFunc selfsigned_func_;
	GenerateAcmeFunc acme_func_;
	UploadCertificateFunc upload_func_;

	const server_settings::acme_options *acme_opts_{};
	SwitchToAcmeOptsFunc switch_to_acme_opts_{};
};
#endif // CERTINFOEDITOR_HPP
